package com.leon.demo.designpattern.create;
/**
 * 
 * @author leonwang
 * 抽象工厂模式，与简单工厂模式的区别在于较简单工厂模式复杂，均面向抽象，工厂抽象，工厂生产的产品抽象，工厂子类和产品子类分别对其实现。
 * 比如：每个笔记本品牌需要自己的CPU,RAM,硬盘，或者每一家快餐店都需要有自己的汉堡、鸡腿、鸡翅等等
 *
 */
public class AbstractFactoryDemo {
	
}

interface ComputerFactory{
	public RAM produceRam();
	public CPU produceCPU();
}
interface RAM{
	
}
interface CPU{
	
}

class PCRAM implements RAM{
	
}
class PCCPU implements CPU{
	
}
class PCComputerFactory implements ComputerFactory{

	@Override
	public RAM produceRam() {
		return new PCRAM();
	}

	@Override
	public CPU produceCPU() {
		return null;
	}
	
}

class MACRAM implements RAM{
	
}
class MACCPU implements CPU{
	
}
class MACComputerFactory implements ComputerFactory{

	@Override
	public RAM produceRam() {
		return null;
	}

	@Override
	public CPU produceCPU() {
		return null;
	}
	
}

